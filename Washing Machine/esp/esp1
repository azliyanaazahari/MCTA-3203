#include <Arduino.h>
#include <esp_now.h>
#include <WiFi.h>
#include <Stepper.h>
#include <HX711_ADC.h>

const int HX711_dout = 16; // MCU > HX711 dout pin
const int HX711_sck = 2; 
HX711_ADC LoadCell(HX711_dout, HX711_sck);

#define STEP_PIN 14  // Step pin connected to ESP32
#define DIR_PIN 15   // Direction pin connected to ESP32
#define EN_PIN 13    // Enable pin connected to ESP32

#define STEPPER_PIN1 12
#define STEPPER_PIN2 13
#define STEPPER_PIN3 14
#define STEPPER_PIN4 15

unsigned long motorStartTime = 0;
unsigned long lastMotorStepTime = 0; // To track time between motor steps
int speedDelay = 1000;  // Delay between steps to control speed
unsigned long t = 0;

Stepper stepper(2048, STEPPER_PIN1, STEPPER_PIN2, STEPPER_PIN3, STEPPER_PIN4);

// Struct to hold received data
#pragma pack(push, 1)
typedef struct {
  char temperature[8];
  char time[8];
  char function[8];
  int timeRemaining;
  int clothesCount;
  float detergentVolume;
  float tempsensor;
  float weight;
} UserData;
#pragma pack(pop)

UserData receivedData;

unsigned long previousMillis = 0;  // Will store the last time the stepper motor was moved
bool washing = false;              // Flag to indicate whether washing mode is active
int washingDuration = 0;           // Duration of washing in seconds
unsigned long washStartTime = 0;   // Start time for the wash mode

// Callback function for receiving data
void onDataReceive(const esp_now_recv_info *recvInfo, const uint8_t *data, int len) {
    // Print sender MAC address
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             recvInfo->src_addr[0], recvInfo->src_addr[1], recvInfo->src_addr[2],
             recvInfo->src_addr[3], recvInfo->src_addr[4], recvInfo->src_addr[5]);
    Serial.print("Received data from: ");
    Serial.println(macStr);

    // Check if the received data matches the size of the structure
    if (len == sizeof(UserData)) {
        memcpy(&receivedData, data, len);

        // Print the received data in human-readable format
        Serial.println("Received User Data:");
        Serial.print("Temperature: ");
        Serial.println(receivedData.temperature);
        Serial.print("Time: ");
        Serial.println(receivedData.time);
        Serial.print("Function: ");
        Serial.println(receivedData.function);
        Serial.print("Time Remaining: ");
        Serial.println(receivedData.timeRemaining);
        Serial.print("Detergent level: ");
        Serial.println(receivedData.detergentVolume);
        Serial.print("Temp Sensor: ");
        Serial.println(receivedData.tempsensor);
        Serial.print("Clothes Count: ");
        Serial.println(receivedData.clothesCount);
        

        // Check the function and start the motor accordingly
        if (strcmp(receivedData.function, "Spin") == 0 || 
            strcmp(receivedData.function, "Wash") == 0 || 
            strcmp(receivedData.function, "Rinse") == 0) {
            
            // Start wash mode if it's not already active
            if (!washing) {
                washingDuration = receivedData.timeRemaining; // Set the wash duration
                washing = true;  // Flag to indicate that washing mode is active
                washStartTime = millis(); // Record the start time
                motorStartTime = millis();
                lastMotorStepTime = millis();
                Serial.println("Wash Mode Started");
            }
        }
        static boolean newDataReady = 0;
    const int serialPrintInterval = 0;
    if (LoadCell.update())
    newDataReady = true;

    // Get smoothed value from the dataset:
    if (newDataReady) {
      if (millis() > t + serialPrintInterval) {
        float i = LoadCell.getData();
        receivedData.weight = i;
        Serial.print("Weight: ");
        Serial.println(receivedData.weight);
        newDataReady = 0;
        t = millis();
      }
    }
    } else {
        Serial.println("Invalid data size received!");
    }
}

void handleMotorTask() {
  if (!washing) return;

  unsigned long currentTime = millis();

  // Check if the washing duration has been reached
  if (currentTime - motorStartTime < (unsigned long)(washingDuration * 1000)) {
    if (currentTime - lastMotorStepTime >= 100) { // Adjust step interval for speed
      stepper.setSpeed(15); // Set the speed of the motor
      stepper.step(10); // Small steps to avoid blocking the system
      lastMotorStepTime = currentTime;
    }
  } else {
    washing = false;  // Stop the motor when the washing duration ends
    Serial.println("Wash Mode Complete");
  }
}

void setup() {
    Serial.begin(115200);
    pinMode(STEP_PIN, OUTPUT);
    pinMode(DIR_PIN, OUTPUT);
    pinMode(EN_PIN, OUTPUT);
    digitalWrite(EN_PIN, LOW); // Enable the motor driver

    // Set device as a Wi-Fi Station
    WiFi.mode(WIFI_STA);
    WiFi.disconnect(); // No need for Wi-Fi connection

    // Initialize ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // Register the receive callback
    esp_now_register_recv_cb(onDataReceive);
    LoadCell.begin();
    unsigned long stabilizingtime = 2000; // Precision right after power-up can be improved by adding stabilizing time
    boolean _tare = true; // Set to false if you don't want tare to be performed
    LoadCell.start(stabilizingtime, _tare);
    if (LoadCell.getTareTimeoutFlag() || LoadCell.getSignalTimeoutFlag()) {
      // Serial.println("Timeout, check MCU>HX711 wiring and pin designations");
      while (1);
    } else {
      LoadCell.setCalFactor(62781.01); // Hardcoded calibration value
      // Serial.println("Startup is complete");
    }
    while (!LoadCell.update());
      uint8_t esp3[] = {0xC0, 0x5D, 0x89, 0xDC, 0xA5, 0x00}; // Replace with ESP3's MAC address
      esp_now_peer_info_t peerInfo;
      memcpy(peerInfo.peer_addr, esp3, 6);
      peerInfo.channel = 0; // Ensure both are on the same channel
      peerInfo.encrypt = false;

      if (esp_now_add_peer(&peerInfo) != ESP_OK) {
          Serial.println("Failed to add peer");
      }
}

void loop() {
    // Continuously call handleMotorTask to move the motor when needed
    handleMotorTask();
    
    // You can add other logic here, and the motor will still respond to new data
}
